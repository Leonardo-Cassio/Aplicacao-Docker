name: CI/CD - Deploy completo

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Build da imagem Docker
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest ./backend

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push da imagem para o Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest

      - name: Subir SonarQube temporário para análise
        run: |
          docker network create sonar-net || true
          docker run -d --name sonar --network sonar-net -p 8166:9000 sonarqube:community
          echo "Aguardando SonarQube iniciar..."
          for i in {1..60}; do
            echo "Resposta do /api/server/version:";
            curl -s http://localhost:8166/api/server/version || true
            if curl -s http://localhost:8166/api/server/version | grep -E '^[0-9]'; then
              echo "SonarQube está pronto!"
              break
            fi
            echo "Aguardando SonarQube... ($i/30)"
            sleep 5
          done
          echo "Aguardando endpoint de autenticação do SonarQube..."
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST -u admin:admin http://localhost:8166/api/authentication/login)
            if [ "$STATUS" = "200" ]; then
              echo "Endpoint de autenticação pronto!"
              break
            fi
            echo "Aguardando autenticação... ($i/30)"
            sleep 2
          done
          echo "Gerando token SonarQube..."
          SONAR_TOKEN=$(curl -s -u admin:admin -X POST "http://localhost:8166/api/user_tokens/generate?name=ci-token" | grep -oP '"token":"\K[^"]+')
          if [ -z "$SONAR_TOKEN" ]; then
            echo "Erro ao gerar token do SonarQube. Abortando pipeline."
            docker logs sonar | tail -50
            docker stop sonar
            docker rm sonar
            exit 1
          fi
          echo "Rodando análise com sonar-scanner..."
          docker run --rm \
            --network sonar-net \
            -e SONAR_HOST_URL="http://sonar:9000" \
            -e SONAR_TOKEN="$SONAR_TOKEN" \
            -v ${{ github.workspace }}:/usr/src \
            sonarsource/sonar-scanner-cli
          echo "Removendo SonarQube..."
          docker stop sonar
          docker rm sonar

      - name: Fazer o deploy da aplicação no servidor
        if: success()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST_IP }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker rm -f app || true
            docker image rm ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest || true
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest
            docker run -d --name app -p 8164:3000 ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest