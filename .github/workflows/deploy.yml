name: CI/CD - Deploy completo

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    services:
      sonarqube:
        image: sonarqube:latest
        ports:
          - 8166:9000
        env:
          SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: "true"
        options: >-
          --health-cmd="curl -f http://localhost:8166/api/system/status || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Esperar o SonarQube iniciar
        run: |
          echo "Aguardando SonarQube ficar disponível..."
          for i in {1..30}; do
            status=$(curl -s http://localhost:8166/api/system/status | jq -r .status)
            if [ "$status" = "UP" ]; then
              echo "SonarQube está UP!"
              break
            fi
            echo "Esperando SonarQube... ($i/30)"
            sleep 5
          done

      - name: Análise de código com SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:8166

      - name: Verificar resultado da análise (Quality Gate)
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:8166

      - name: Build da imagem Docker
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest ./backend

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push da imagem para o Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest

      - name: Fazer o deploy da aplicação no servidor
        if: success()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST_IP }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker rm -f app || true
            docker image rm ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest || true
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest
            docker run -d --name app -p 8164:3000 ${{ secrets.DOCKER_HUB_USERNAME }}/app:latest
